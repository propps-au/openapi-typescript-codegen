{{>header}}

import fetch from 'isomorphic-unfetch';
import { types } from 'util';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { OpenAPI, Config } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBinary}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>node/getHeaders}}


{{>node/getRequestBody}}


{{>node/sendRequest}}


{{>node/getResponseHeader}}


{{>node/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request using node-fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request(options: ApiRequestOptions): Promise<ApiResult> {
    const url = getUrl(options);
    const response = await sendRequest(options, url, OpenAPI);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, options.responseHeader);

    const result: ApiResult = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody,
    };

    catchErrors(options, result);
    return result;
}

export interface IOpenAPIClient {
    request(options: ApiRequestOptions): Promise<ApiResult>
}

export class OpenAPIClient implements IOpenAPIClient {
    constructor(private config: Config) {}

    public async request(options: ApiRequestOptions): Promise<ApiResult> {
        const url = getUrl(options);
        const response = await sendRequest(options, url, this.config);
        const responseBody = await getResponseBody(response);
        const responseHeader = getResponseHeader(response, options.responseHeader);

        const result: ApiResult = {
            url,
            ok: response.ok,
            status: response.status,
            statusText: response.statusText,
            body: responseHeader || responseBody,
        };

        catchErrors(options, result);
        return result;
    }

    public call<T extends Endpoint<any, any>>(
        fn: T,
        params: EndpointParams<T>
    ): Promise<EndpointResult<T>> {
        return this.endpoint(fn)(params)
    }

    public endpoint<T extends Endpoint<any, any>>(
        fn: T
    ): (params: EndpointParams<T>) => Promise<EndpointResult<T>> {
        return (params) => fn(this, params)
    }
}

type Endpoint<Params, Result> = (client: OpenAPIClient, params: Params) => Promise<Result>
type EndpointParams<T> = T extends Endpoint<infer Params, any> ? Params : never
type EndpointResult<T> = T extends Endpoint<any, infer Result> ? Result : never
